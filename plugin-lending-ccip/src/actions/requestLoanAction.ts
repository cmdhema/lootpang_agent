import { Action, HandlerCallback, IAgentRuntime, Memory, State } from "@elizaos/core";
import { ethers } from "ethers";
import { BlockchainService } from "../utils/blockchain";

export const requestLoanAction: Action = {
    name: "REQUEST_LOAN",
    similes: [
        "ÎåÄÏ∂ú", "ÎπåÎ¶¨Í∏∞", "KKCoinÎπåÎ¶¨Í∏∞", "ÎåÄÏ∂úÏã†Ï≤≠",
        "ÏºÄÏù¥ÏºÄÏù¥ÏΩîÏù∏ÎπåÎ¶¨Í∏∞", "ÎπåÎ†§Ï§ò", "ÎåÄÏ∂úÌï¥Ï§ò", "Î°†",
        "BORROW", "LOAN_REQUEST", "GET_LOAN", "REQUEST_LENDING", "BORROW_MONEY", "TAKE_LOAN"
    ],
    description: "KKCoin ÎåÄÏ∂úÏùÑ ÏöîÏ≤≠Ìï©ÎãàÎã§ (ÏÑúÎ™Ö ÌïÑÏöî)",
    examples: [
        [
            {
                name: "user",
                content: {
                    text: "100 KKCoin ÎπåÎ†§Ï§ò"
                }
            },
            {
                name: "assistant",
                content: {
                    text: "ÎåÄÏ∂ú ÏöîÏ≤≠ÏùÑ Ï≤òÎ¶¨ÌïòÍ≤†ÏäµÎãàÎã§. Î≥¥ÏïàÏùÑ ÏúÑÌï¥ ÏÑúÎ™ÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.",
                    action: "REQUEST_LOAN"
                }
            }
        ]
    ],
    validate: async (_runtime: IAgentRuntime, message: Memory) => {
        const text = message.content?.text?.toLowerCase();
        if (!text) return false;
        
        const borrowKeywords = ['ÎåÄÏ∂ú', 'ÎπåÎ¶¨Í∏∞', 'ÎπåÎ†§Ï§ò', 'ÎåÄÏ∂úÌï¥Ï§ò', 'borrow', 'loan', 'lend', 'lending', 'kkcoin', 'kkc'];
        const amountPattern = /(\d+(?:\.\d+)?)\s*(?:kkc|kkcoin|ÏºÄÏù¥ÏºÄÏù¥ÏΩîÏù∏)/i;
        
        return borrowKeywords.some(keyword => text.includes(keyword)) && amountPattern.test(text);
    },
    handler: async (
        _runtime: IAgentRuntime,
        message: Memory,
        _state?: State,
        _options?: any,
        callback?: HandlerCallback
    ) => {
        try {
            console.log("[DEBUG] REQUEST_LOAN handler started");
            console.log("[DEBUG] Message content:", message.content?.text);

            // Extract amount from message
            const text = message.content?.text;
            if (!text) {
                throw new Error("No message text found");
            }
            
            const amountMatch = text.match(/(\d+(?:\.\d+)?)\s*(?:kkc|kkcoin|ÏºÄÏù¥ÏºÄÏù¥ÏΩîÏù∏)/i);
            
            if (!amountMatch) {
                throw new Error("Could not extract loan amount from message");
            }

            const kkcAmount = parseFloat(amountMatch[1]);
            console.log("[DEBUG] Extracted KKC amount:", kkcAmount);

            // Initialize blockchain service
            const blockchainService = new BlockchainService();
            const userAddress = blockchainService.getWalletAddress();
            console.log("[DEBUG] User address:", userAddress);

            // Get contracts from both networks
            console.log("[DEBUG] Getting vault contracts from both networks...");
            const sepoliaVault = blockchainService.getSepoliaVaultContractReadOnly(); // For collateral info
            const baseVault = blockchainService.getBaseVaultContractReadOnly(); // For nonce and debt

            // Check user's current status from both networks
            console.log("[DEBUG] Checking user collateral (Sepolia) and loan status (Base)...");
            const [userCollateral, maxLoanAmount] = await Promise.all([
                sepoliaVault.getCollateral(userAddress),      // Sepolia: Îã¥Î≥¥ Ï†ïÎ≥¥
                sepoliaVault.getMaxLoanAmount(userAddress)    // Sepolia: ÏµúÎåÄ ÎåÄÏ∂ú Í∞ÄÎä• Í∏àÏï°
            ]);

            const [userDebt, userNonce] = await Promise.all([
                baseVault.getDebt(userAddress),               // Base: ÌòÑÏû¨ ÎåÄÏ∂ú
                baseVault.nonces(userAddress)                 // Base: EIP-712 nonce
            ]);

            console.log("[DEBUG] User status:");
            console.log("  - Collateral (Sepolia):", ethers.formatEther(userCollateral), "ETH");
            console.log("  - Current debt (Base):", ethers.formatUnits(userDebt, 18), "KKCoin");
            console.log("  - Max loan amount (Sepolia):", ethers.formatUnits(maxLoanAmount, 18), "KKCoin");
            console.log("  - Nonce (Base):", userNonce.toString());

            // Check if user has sufficient collateral
            const maxLoanAmountFormatted = parseFloat(ethers.formatUnits(maxLoanAmount, 18));
            
            if (maxLoanAmountFormatted < kkcAmount) {
                const currentCollateralEth = ethers.formatEther(userCollateral);
                const additionalNeeded = ((kkcAmount - maxLoanAmountFormatted) * 1.5).toFixed(4); // Assuming 150% collateral ratio
                
                if (callback) {
                    callback({
                        text: `‚ùå **Îã¥Î≥¥Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!**\n\n` +
                              `üéØ **ÎåÄÏ∂ú ÏöîÏ≤≠**: ${kkcAmount} KKCoin\n` +
                              `üí∞ **ÌòÑÏû¨ Îã¥Î≥¥**: ${currentCollateralEth} ETH\n` +
                              `üîÑ **ÏµúÎåÄ ÎåÄÏ∂ú Í∞ÄÎä•**: ${maxLoanAmountFormatted} KKCoin\n` +
                              `‚ö†Ô∏è **Ï∂îÍ∞Ä ÌïÑÏöî**: ÏïΩ ${additionalNeeded} ETH\n\n` +
                              `üí° Î®ºÏ†Ä "${additionalNeeded} ETH ÏòàÏπòÌï¥Ï§ò"ÎùºÍ≥† ÎßêÌï¥Ï£ºÏÑ∏Ïöî!`,
                        action: "INSUFFICIENT_COLLATERAL"
                    });
                }
                return false;
            }

            // Generate signature data
            const deadline = Math.floor(Date.now() / 1000) + 3600; // 1 hour from now
            const nonce = Number(userNonce);
            
            const signatureData = {
                user: userAddress,
                amount: kkcAmount,
                nonce: nonce,
                deadline: deadline
            };

            console.log("[DEBUG] Signature data generated:");
            console.log("  - User:", signatureData.user);
            console.log("  - Amount:", signatureData.amount);
            console.log("  - Nonce:", signatureData.nonce);
            console.log("  - Deadline:", new Date(signatureData.deadline * 1000).toLocaleString());

            if (callback) {
                callback({
                    text: `üîê **ÎåÄÏ∂ú ÏäπÏù∏ÏùÑ ÏúÑÌï¥ ÏÑúÎ™ÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§**\n\n` +
                          `üí≥ **ÎåÄÏ∂ú Í∏àÏï°**: ${kkcAmount} KKCoin\n` +
                          `üìù **ÏÑúÎ™Ö Îç∞Ïù¥ÌÑ∞**:\n` +
                          `‚Ä¢ ÏÇ¨Ïö©Ïûê: ${userAddress}\n` +
                          `‚Ä¢ Í∏àÏï°: ${kkcAmount} KKCoin\n` +
                          `‚Ä¢ Nonce: ${nonce}\n` +
                          `‚Ä¢ ÎßåÎ£åÏãúÍ∞Ñ: ${new Date(deadline * 1000).toLocaleString()}\n\n` +
                          `‚úÖ **ÏßÄÍ∞ëÏóêÏÑú ÏÑúÎ™Ö ÌõÑ "ÏÑúÎ™Ö ÏôÑÎ£å [ÏÑúÎ™ÖÍ∞í]"ÎùºÍ≥† ÎßêÌï¥Ï£ºÏÑ∏Ïöî**\n\n` +
                          `‚ö†Ô∏è ÏÑúÎ™ÖÏùÄ 1ÏãúÍ∞Ñ ÌõÑ ÎßåÎ£åÎê©ÎãàÎã§.`,
                    action: "AWAITING_SIGNATURE",
                    metadata: { 
                        signatureData,
                        loanAmount: kkcAmount,
                        userAddress,
                        nonce,
                        deadline
                    }
                });
            }

            return true;

        } catch (error: unknown) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            console.log("[DEBUG] Request loan error:", errorMessage);
            console.log("[DEBUG] Error stack:", error instanceof Error ? error.stack : 'No stack trace available');
            
            if (callback) {
                callback({
                    text: `‚ùå **ÎåÄÏ∂ú ÏöîÏ≤≠ Ïã§Ìå®**\n\n` +
                          `üö´ **Ïò§Î•ò**: ${errorMessage}\n\n` +
                          `üí° ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.`,
                    action: "LOAN_REQUEST_FAILED"
                });
            }
            return false;
        }
    }
}; 